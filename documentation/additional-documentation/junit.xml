<?xml version="1.0"?>
<testsuite name="Chrome 91.0.4469.0 (Mac OS 10.15.7)" package="" timestamp="2021-06-14T13:48:39" id="0" hostname="MBP-Rick" tests="65" errors="0" failures="1" time="0.053">
  <properties>
    <property name="browser.fullName" value="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4469.0 Safari/537.36"/>
  </properties>
  <testcase name="Effects: Dummy effects mapDummy should dispatch action on success" time="0.053" classname="Effects: Dummy effects mapDummy">
    <failure type="">Expected false to equal '
Expected 
	{"frame":1,"notification":{"kind":"N","value":{"entityMap":{"id":"noreply@domain.com"},"type":"[DUMMY] MAP SUCCESS"},"hasValue":true}}
	
to deep equal 
	{"frame":1,"notification":{"kind":"N","value":{"entityMap":{"id":"noreply@domain.com"},"type":"[DUMMY] MAP SUCCESS"},"hasValue":true}}
'.
Error: Expected false to equal '
Expected 
	{"frame":1,"notification":{"kind":"N","value":{"entityMap":{"id":"noreply@domain.com"},"type":"[DUMMY] MAP SUCCESS"},"hasValue":true}}
	
to deep equal 
	{"frame":1,"notification":{"kind":"N","value":{"entityMap":{"id":"noreply@domain.com"},"type":"[DUMMY] MAP SUCCESS"},"hasValue":true}}
'.
    at &lt;Jasmine&gt;
    at TestScheduler.observableMatcher [as assertDeepEqual] (node_modules/jasmine-marbles/es6/src/matcher.js:246:1)
    at node_modules/rxjs/_esm2015/internal/testing/TestScheduler.js:110:1
    at &lt;Jasmine&gt;
</failure>
  </testcase>
  <testcase name="Effects: Dummy effects mapDummy should dispatch action on load" time="0" classname="Effects: Dummy effects mapDummy">
    <skipped/>
  </testcase>
  <testcase name="Effects: Dummy effects mapDummy should dispatch action when failed" time="0" classname="Effects: Dummy effects mapDummy">
    <skipped/>
  </testcase>
  <testcase name="Effects: Dummy effects getDummyData should dispatch action when failed" time="0" classname="Effects: Dummy effects getDummyData">
    <skipped/>
  </testcase>
  <testcase name="Effects: Dummy effects getDummyData should dispatch action on load" time="0" classname="Effects: Dummy effects getDummyData">
    <skipped/>
  </testcase>
  <testcase name="Helpers: Table helper flattensObject should sort the array" time="0" classname="Helpers: Table helper flattensObject">
    <skipped/>
  </testcase>
  <testcase name="Helpers: Table helper dateSort should sort the array" time="0" classname="Helpers: Table helper dateSort">
    <skipped/>
  </testcase>
  <testcase name="Helpers: Table helper sort should sort the array" time="0" classname="Helpers: Table helper sort">
    <skipped/>
  </testcase>
  <testcase name="Components: App Component should have an Router Language subscription in mutableSubscriptions" time="0" classname="Components: App Component">
    <skipped/>
  </testcase>
  <testcase name="UniversalInterceptor with serverUrl should handle serverRequest if serverUrl is injected" time="0" classname="UniversalInterceptor with serverUrl">
    <skipped/>
  </testcase>
  <testcase name="Reducers: Notifications Reducer loadNotificationsSuccess should add notification" time="0" classname="Reducers: Notifications Reducer loadNotificationsSuccess">
    <skipped/>
  </testcase>
  <testcase name="Reducers: Notifications Reducer clearNotifications should clear all the entities" time="0" classname="Reducers: Notifications Reducer clearNotifications">
    <skipped/>
  </testcase>
  <testcase name="Reducers: Notifications Reducer clearNotifications should remove all the ids" time="0" classname="Reducers: Notifications Reducer clearNotifications">
    <skipped/>
  </testcase>
  <testcase name="Reducers: Notifications Reducer addNotificationSuccess should add a new notification" time="0" classname="Reducers: Notifications Reducer addNotificationSuccess">
    <skipped/>
  </testcase>
  <testcase name="Service: Manual service #sendSubscriptionToTheServer should return 200" time="0" classname="Service: Manual service #sendSubscriptionToTheServer">
    <skipped/>
  </testcase>
  <testcase name="Service: Manual service #loadNotifications should return 200" time="0" classname="Service: Manual service #loadNotifications">
    <skipped/>
  </testcase>
  <testcase name="Service: Manual service #sendNotification should return 200" time="0" classname="Service: Manual service #sendNotification">
    <skipped/>
  </testcase>
  <testcase name="storage meta reducer should return the saved state" time="0" classname="storage meta reducer">
    <skipped/>
  </testcase>
  <testcase name="storage meta reducer should save configured key" time="0" classname="storage meta reducer">
    <skipped/>
  </testcase>
  <testcase name="storage meta reducer should merge the saved state with the initial state and override the initial state value" time="0" classname="storage meta reducer">
    <skipped/>
  </testcase>
  <testcase name="storage meta reducer should simply return the state" time="0" classname="storage meta reducer">
    <skipped/>
  </testcase>
  <testcase name="Reducers: Dummy reducer should load dummy successfully" time="0" classname="Reducers: Dummy reducer">
    <skipped/>
  </testcase>
  <testcase name="Reducers: Dummy reducer should not load dummy" time="0" classname="Reducers: Dummy reducer">
    <skipped/>
  </testcase>
  <testcase name="Reducers: Dummy reducer should clear the error" time="0" classname="Reducers: Dummy reducer">
    <skipped/>
  </testcase>
  <testcase name="Reducers: Dummy reducer should return default state" time="0" classname="Reducers: Dummy reducer">
    <skipped/>
  </testcase>
  <testcase name="Reducers: Dummy reducer should load dummy" time="0" classname="Reducers: Dummy reducer">
    <skipped/>
  </testcase>
  <testcase name="Routes: CustomSerializer should return only URL" time="0" classname="Routes: CustomSerializer">
    <skipped/>
  </testcase>
  <testcase name="Routes: CustomSerializer should return route and query params" time="0" classname="Routes: CustomSerializer">
    <skipped/>
  </testcase>
  <testcase name="Pages: Home page should create the homePage" time="0" classname="Pages: Home page">
    <skipped/>
  </testcase>
  <testcase name="Pages: Error page should create the errorPage" time="0" classname="Pages: Error page">
    <skipped/>
  </testcase>
  <testcase name="Pages: Error page navigate to a wrong url takes you to /404" time="0" classname="Pages: Error page">
    <skipped/>
  </testcase>
  <testcase name="Effects: Router effects Back should not dispatch" time="0" classname="Effects: Router effects Back">
    <skipped/>
  </testcase>
  <testcase name="Effects: Router effects Back should navigate to forward" time="0" classname="Effects: Router effects Back">
    <skipped/>
  </testcase>
  <testcase name="Effects: Router effects Forward should navigate to back" time="0" classname="Effects: Router effects Forward">
    <skipped/>
  </testcase>
  <testcase name="Effects: Router effects Forward should not dispatch" time="0" classname="Effects: Router effects Forward">
    <skipped/>
  </testcase>
  <testcase name="Effects: Router effects Go should navigate to provided path" time="0" classname="Effects: Router effects Go">
    <skipped/>
  </testcase>
  <testcase name="Effects: Router effects Go should not dispatch" time="0" classname="Effects: Router effects Go">
    <skipped/>
  </testcase>
  <testcase name="Actions: Dummy Actions should create an action ClearError" time="0" classname="Actions: Dummy Actions">
    <skipped/>
  </testcase>
  <testcase name="Actions: Dummy Actions should create an action Load" time="0" classname="Actions: Dummy Actions">
    <skipped/>
  </testcase>
  <testcase name="Actions: Dummy Actions should create an action LoadFail" time="0" classname="Actions: Dummy Actions">
    <skipped/>
  </testcase>
  <testcase name="Actions: Dummy Actions should create an action LoadSuccess" time="0" classname="Actions: Dummy Actions">
    <skipped/>
  </testcase>
  <testcase name="AppHttpInterceptor should dispatch an action to set isPendingRequest status" time="0" classname="AppHttpInterceptor">
    <skipped/>
  </testcase>
  <testcase name="Routes: LanguageGuard should pass the LanguageGuard" time="0" classname="Routes: LanguageGuard">
    <skipped/>
  </testcase>
  <testcase name="Routes: LanguageGuard should not pass the LanguageGuard" time="0" classname="Routes: LanguageGuard">
    <skipped/>
  </testcase>
  <testcase name="Reducers: Application reducer should return default state" time="0" classname="Reducers: Application reducer">
    <skipped/>
  </testcase>
  <testcase name="Reducers: Application reducer should set isPendingRequest to true" time="0" classname="Reducers: Application reducer">
    <skipped/>
  </testcase>
  <testcase name="GoogleAnalyticsEffects should call google analytics when platform is not Browser" time="0" classname="GoogleAnalyticsEffects">
    <skipped/>
  </testcase>
  <testcase name="GoogleAnalyticsEffects should not dispatch action" time="0" classname="GoogleAnalyticsEffects">
    <skipped/>
  </testcase>
  <testcase name="GoogleAnalyticsEffects should call google analytics when platform is Browser" time="0" classname="GoogleAnalyticsEffects">
    <skipped/>
  </testcase>
  <testcase name="Router Actions Forward action should create an action" time="0" classname="Router Actions Forward action">
    <skipped/>
  </testcase>
  <testcase name="Router Actions Back action should create an action" time="0" classname="Router Actions Back action">
    <skipped/>
  </testcase>
  <testcase name="Router Actions Go action should create an action" time="0" classname="Router Actions Go action">
    <skipped/>
  </testcase>
  <testcase name="Service: Dummy service #getDummyData should return expected Dummy" time="0" classname="Service: Dummy service #getDummyData">
    <skipped/>
  </testcase>
  <testcase name="Selectors: application selector should return isMakingRequest status of application state" time="0" classname="Selectors: application selector">
    <skipped/>
  </testcase>
  <testcase name="Actions: Application Actions should update the Application action" time="0" classname="Actions: Application Actions">
    <skipped/>
  </testcase>
  <testcase name="Selectors: Notifications selectors should return all Notifications as an array" time="0" classname="Selectors: Notifications selectors">
    <skipped/>
  </testcase>
  <testcase name="Actions: Notifications Actions should create an action addNotification" time="0" classname="Actions: Notifications Actions">
    <skipped/>
  </testcase>
  <testcase name="Actions: Notifications Actions should create an action sendNotification" time="0" classname="Actions: Notifications Actions">
    <skipped/>
  </testcase>
  <testcase name="Actions: Notifications Actions should create an action clearNotifications" time="0" classname="Actions: Notifications Actions">
    <skipped/>
  </testcase>
  <testcase name="Actions: Notifications Actions should create an action loadNotifications" time="0" classname="Actions: Notifications Actions">
    <skipped/>
  </testcase>
  <testcase name="Actions: Notifications Actions should create an action loadNotificationsSuccess" time="0" classname="Actions: Notifications Actions">
    <skipped/>
  </testcase>
  <testcase name="Actions: Notifications Actions should create an action loadNotificationsFail" time="0" classname="Actions: Notifications Actions">
    <skipped/>
  </testcase>
  <testcase name="UniversalInterceptor without serverUrl should handle serverRequest if serverUrl is injected" time="0" classname="UniversalInterceptor without serverUrl">
    <skipped/>
  </testcase>
  <testcase name="Selectors: Router selector should return current RouterStateUrl" time="0" classname="Selectors: Router selector">
    <skipped/>
  </testcase>
  <testcase name="Selectors: Router selector should return the selected Language from routerState" time="0" classname="Selectors: Router selector">
    <skipped/>
  </testcase>
  <system-out>
    <![CDATA[
]]>
  </system-out>
  <system-err/>
</testsuite>